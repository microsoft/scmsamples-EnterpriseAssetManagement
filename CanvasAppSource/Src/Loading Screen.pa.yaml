# ************************************************************************************************
# Warning: YAML source code for Canvas Apps is in preview. The schema is being actively developed.
# Content may be incomplete and subject to change.
# This file is read-only and should only be used to review changes made within Power Apps Studio.
# This file isn't used when loading the app. External editing, merging and conflict resolution are
# not supported.
# 
# For more information, visit https://go.microsoft.com/fwlink/?linkid=2292623
# ************************************************************************************************
Screens:
  Loading Screen:
    Properties:
      Fill: =gblAppColors.Background
      OnVisible: |-
        =
        // should go last
        Set(
            gblPreviousScreen,
            Self
        )
    Children:
      - timerPreloadCacheAndNavigateAsync:
          Control: Timer@2.1.0
          Properties:
            AutoStart: =true
            Duration: =5000
            Height: =50
            OnTimerStart: |-
              =UpdateContext({ varRetryCacheLoad: false });

              // attempt to load the cache
              IfError(
                  // try:
                  LoadData(colAppStartupCache, "AppStartupCache", true),
                      // on error:
                      Trace("Failed loading app startup cache", ErrorSeverity.Warning, FirstError), // this always occurs in PApp Studio
                  // then do:
                  Set(gblAppCache, First(colAppStartupCache))
              );

              UpdateContext({
                  varShowOnboarding: Not gblAppCache.CacheExists,
                  varRefreshCache:
                      varRefreshCacheOverride
                      Or Not gblAppCache.CacheExists
                      // expired
                      Or DateAdd(gblAppCache.CacheLastRefreshed, 7, TimeUnit.Days) < Now()
                      // user changed
                      Or User().Email <> gblAppCache.UserEmail,
                  varRefreshCacheOverride: false
              });

              If(varRefreshCache,
                  UpdateContext({ varUserSettings: First('Asset management mobile application user settings entity (mserp)') });
                  IfError(
                      // try:
                      varUserSettings,
                          // on error:
                          UpdateContext({ varIsUnauthorizedOrNetworkFailed: true });
                          Notify(T.Error_FailedRetrievingUserSettings, NotificationType.Error);
                          Trace("Failed getting user settings", TraceSeverity.Error, FirstError),
                      // then try:
                      Set(gblAppCache,
                      {
                          CacheExists: true,
                          CacheVersion: gblAppVersion,
                          CacheLastRefreshed: Now(),
                          UserEmail: User().Email,
                          FnOUserId: varUserSettings.WorkerUserId,
                          IsUserMaintenanceWorker:
                              varUserSettings.HasMaintenanceWorkerRole = 'NoYes (mserp)'.Yes
                              And varUserSettings.'Personnel number' <> Blank(),
                          IsUserMaintenanceRequester: varUserSettings.HasMaintenanceRequesterRole = 'NoYes (mserp)'.Yes,
                          UserPersonnelNumber: varUserSettings.'Personnel number'
                      });

                      If(gblAppCache.IsUserMaintenanceWorker,
                          // ensure the user has an active EntAssetWorker assigned to them
                          // and populate the app cache with those details
                          UpdateContext({
                              varUserActiveAssetWorkers: Filter('Asset management maintenance workers (mserp)',
                                  Active = 'NoYes (mserp)'.Yes
                                  And 'Personnel number' = gblAppCache.UserPersonnelNumber
                                  // not necessary for filtering, but to ensure the buffer is populated with this field:
                                  And 'Company Code' <> Blank()
                              )
                          });
                          IfError(
                              // try:
                              varUserActiveAssetWorkers,
                                  // on error:
                                  Notify(Substitute(T.Error_FailedRetrievingMaintenanceWorkerDetails, "{UserPersonnelNumber}", gblAppCache.UserPersonnelNumber), NotificationType.Error);
                                  Trace("Failed getting maintenance worker details", TraceSeverity.Error, FirstError),
                              // then do:
                              Set(gblAppCache,
                                  Patch(gblAppCache, {
                                      UserAssignedWorkers: varUserActiveAssetWorkers,
                                      UserActiveWorker: First(varUserActiveAssetWorkers),
                                      IsUserMaintenanceWorker: Not IsEmpty(varUserActiveAssetWorkers)
                                  })
                              );
                              If(IsEmpty(varUserActiveAssetWorkers),
                                  Notify(T.Error_NotAssignedToAnyActiveWorkers);
                                  Trace("User is not assigned to any active asset management workers.", ErrorSeverity.Warning)
                              );
                          );
                      );

                      // store the cache
                      ClearCollect(colAppStartupCache, gblAppCache);
                      SaveData(colAppStartupCache, "AppStartupCache"),
                          // on error:
                          Trace("Failed persisting app startup cache", ErrorSeverity.Warning), // this always occurs in PApp Studio
                      true
                  )
              );

              Trace("UserDetails", TraceSeverity.Information, {
                  isMaintenanceWorker: gblAppCache.IsUserMaintenanceWorker,
                  isMaintenanceRequester: gblAppCache.IsUserMaintenanceRequester
              });

              // navigate
              If(
                  varShowOnboarding And Not varIsUnauthorizedOrNetworkFailed And (gblAppCache.IsUserMaintenanceRequester Or gblAppCache.IsUserMaintenanceWorker),
                      Navigate('Onboarding Screen'),
                  gblAppCache.IsUserMaintenanceWorker,
                      Navigate('Work Orders Screen'),
                  gblAppCache.IsUserMaintenanceRequester,
                      Navigate('Create Order Or Request Search Screen')
                  // else: no navigation performed and lblUnauthorizedMessage will be visible
              );
            Repeat: =varRetryCacheLoad
            Text: =""
            Visible: =false
            Width: =50
      - conLoading:
          Control: GroupContainer@1.3.0
          Variant: AutoLayout
          Properties:
            Height: =Parent.Height-imgLoadingLogo.Height -10
            LayoutAlignItems: =LayoutAlignItems.Center
            LayoutDirection: =LayoutDirection.Vertical
            LayoutGap: =30
            LayoutJustifyContent: =LayoutJustifyContent.Center
            PaddingBottom: =10
            Width: =Parent.Width
          Children:
            - imgLoadingAppLogo:
                Control: Image@2.2.3
                Properties:
                  Image: ='eam-icon-192px'
                  X: =67
                  Y: =274
            - lblLoadingTitle:
                Control: Label@2.5.1
                Properties:
                  Align: =Align.Center
                  Font: =Font.'Segoe UI'
                  FontWeight: =FontWeight.Bold
                  Size: =20
                  Text: |-
                    =//pal-disable PAL004
                    "Asset Management"
                  Width: =300
                  X: =520
                  Y: =166
            - lblLoadingSubtitle:
                Control: Label@2.5.1
                Properties:
                  Align: =Align.Center
                  Font: =Font.'Segoe UI'
                  Size: =15
                  Text: |-
                    =//pal-disable PAL004
                    "Dynamics 365"
                  Width: =300
                  X: =42
                  Y: =206
            - lblUnauthorizedMessage:
                Control: Label@2.5.1
                Properties:
                  Align: =Align.Center
                  AutoHeight: =true
                  Color: =RGBA(184, 0, 0, 1)
                  Font: =Font.'Segoe UI'
                  Size: =gblAppStyles.FontSize_Medium
                  Text: =T.Error_AppInitializationFailed
                  Visible: =varIsUnauthorizedOrNetworkFailed Or (gblAppCache.CacheExists And Not gblAppCache.IsUserMaintenanceRequester And Not gblAppCache.IsUserMaintenanceWorker)
                  Width: =Min(380, App.Width)
                  X: =42
                  Y: =206
            - btnReloadUserSettings:
                Control: Classic/Button@2.2.0
                Properties:
                  OnSelect: |-
                    =UpdateContext({ varRetryCacheLoad: true, varRefreshCacheOverride: true, varIsUnauthorizedOrNetworkFailed: false })
                  Text: =T.RetryButtonLabel
                  Visible: =lblUnauthorizedMessage.Visible
      - imgLoadingLogo:
          Control: Image@2.2.3
          Properties:
            Height: =28
            Image: =MSLogo
            PaddingBottom: =5
            PaddingTop: =5
            Width: =130
            X: =Parent.Width/2 - imgLoadingLogo.Width/2
            Y: =conLoading.Height
      - lblDEV_VERSION:
          Control: Label@2.5.1
          Properties:
            Align: =Align.Right
            Font: =Font.'Segoe UI'
            Height: =37
            Size: =8
            Text: =gblAppVersion
            VerticalAlign: =VerticalAlign.Top
            Width: =60
            X: =Parent.Width - Self.Width
