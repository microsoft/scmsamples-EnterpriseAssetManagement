"'Loading Screen' As screen":
    Fill: =gblAppColors.Background
    OnVisible: |-
        =
        // should go last
        Set(
            gblPreviousScreen,
            Self
        )

    timerPreloadCacheAndNavigateAsync As timer:
        AutoStart: =true
        Duration: =5000
        Height: =50
        OnTimerStart: |-
            =UpdateContext({ varRetryCacheLoad: false });
            
            // attempt to load the cache
            IfError(
                // try:
                LoadData(colAppStartupCache, "AppStartupCache", true),
                    // on error:
                    Trace("Failed loading app startup cache", ErrorSeverity.Warning, FirstError), // this always occurs in PApp Studio
                // then do:
                Set(gblAppCache, First(colAppStartupCache))
            );
            
            UpdateContext({
                varShowOnboarding: Not gblAppCache.CacheExists,
                varRefreshCache:
                    varRefreshCacheOverride
                    Or Not gblAppCache.CacheExists
                    // expired
                    Or DateAdd(gblAppCache.CacheLastRefreshed, 7, TimeUnit.Days) < Now()
                    // user changed
                    Or User().Email <> gblAppCache.UserEmail,
                varRefreshCacheOverride: false
            });
            
            If(varRefreshCache,
                UpdateContext({ varUserSettings: First('Asset management mobile application user settings entity (mserp)') });
                IfError(
                    // try:
                    varUserSettings,
                        // on error:
                        UpdateContext({ varIsUnauthorizedOrNetworkFailed: true });
                        Notify(T.Error_FailedRetrievingUserSettings, NotificationType.Error);
                        Trace("Failed getting user settings", TraceSeverity.Error, FirstError),
                    // then try:
                    Set(gblAppCache,
                    {
                        CacheExists: true,
                        CacheVersion: gblAppVersion,
                        CacheLastRefreshed: Now(),
                        UserEmail: User().Email,
                        FnOUserId: varUserSettings.WorkerUserId,
                        IsUserMaintenanceWorker:
                            varUserSettings.HasMaintenanceWorkerRole = 'NoYes (mserp)'.Yes
                            And varUserSettings.'Personnel number' <> Blank(),
                        IsUserMaintenanceRequester: varUserSettings.HasMaintenanceRequesterRole = 'NoYes (mserp)'.Yes,
                        UserPersonnelNumber: varUserSettings.'Personnel number'
                    });
            
                    If(gblAppCache.IsUserMaintenanceWorker,
                        // ensure the user has an active EntAssetWorker assigned to them
                        // and populate the app cache with those details
                        UpdateContext({
                            varUserActiveAssetWorkers: Filter('Asset management maintenance workers (mserp)',
                                Active = 'NoYes (mserp)'.Yes
                                And 'Personnel number' = gblAppCache.UserPersonnelNumber
                                // not necessary for filtering, but to ensure the buffer is populated with this field:
                                And 'Company Code' <> Blank()
                            )
                        });
                        IfError(
                            // try:
                            varUserActiveAssetWorkers,
                                // on error:
                                Notify(Substitute(T.Error_FailedRetrievingMaintenanceWorkerDetails, "{UserPersonnelNumber}", gblAppCache.UserPersonnelNumber), NotificationType.Error);
                                Trace("Failed getting maintenance worker details", TraceSeverity.Error, FirstError),
                            // then do:
                            Set(gblAppCache,
                                Patch(gblAppCache, {
                                    UserAssignedWorkers: varUserActiveAssetWorkers,
                                    UserActiveWorker: First(varUserActiveAssetWorkers),
                                    IsUserMaintenanceWorker: Not IsEmpty(varUserActiveAssetWorkers)
                                })
                            );
                            If(IsEmpty(varUserActiveAssetWorkers),
                                Notify(T.Error_NotAssignedToAnyActiveWorkers);
                                Trace("User is not assigned to any active asset management workers.", ErrorSeverity.Warning)
                            );
                        );
                    );
            
                    // store the cache
                    ClearCollect(colAppStartupCache, gblAppCache);
                    SaveData(colAppStartupCache, "AppStartupCache"),
                        // on error:
                        Trace("Failed persisting app startup cache", ErrorSeverity.Warning), // this always occurs in PApp Studio
                    true
                )
            );
            
            Trace("UserDetails", TraceSeverity.Information, {
                isMaintenanceWorker: gblAppCache.IsUserMaintenanceWorker,
                isMaintenanceRequester: gblAppCache.IsUserMaintenanceRequester
            });
            
            // navigate
            If(
                varShowOnboarding And Not varIsUnauthorizedOrNetworkFailed And (gblAppCache.IsUserMaintenanceRequester Or gblAppCache.IsUserMaintenanceWorker),
                    Navigate('Onboarding Screen'),
                gblAppCache.IsUserMaintenanceWorker,
                    Navigate('Work Orders Screen'),
                gblAppCache.IsUserMaintenanceRequester,
                    Navigate('Create Order Or Request Search Screen')
                // else: no navigation performed and lblUnauthorizedMessage will be visible
            );
        Repeat: =varRetryCacheLoad
        Text: =""
        Visible: =false
        Width: =50
        ZIndex: =1

    conLoading As groupContainer.verticalAutoLayoutContainer:
        Height: =Parent.Height-imgLoadingLogo.Height -10
        LayoutAlignItems: =LayoutAlignItems.Center
        LayoutDirection: =LayoutDirection.Vertical
        LayoutGap: =30
        LayoutJustifyContent: =LayoutJustifyContent.Center
        LayoutMode: =LayoutMode.Auto
        PaddingBottom: =10
        Width: =Parent.Width
        ZIndex: =2

        imgLoadingAppLogo As image:
            Image: ='eam-icon-192px'
            X: =67
            Y: =274
            ZIndex: =1

        lblLoadingTitle As label:
            Align: =Align.Center
            Font: =Font.'Segoe UI'
            FontWeight: =FontWeight.Bold
            Size: =20
            Text: |-
                =//pal-disable PAL004
                "Asset Management"
            Width: =300
            X: =520
            Y: =166
            ZIndex: =2

        lblLoadingSubtitle As label:
            Align: =Align.Center
            Font: =Font.'Segoe UI'
            Size: =15
            Text: |-
                =//pal-disable PAL004
                "Dynamics 365"
            Width: =300
            X: =42
            Y: =206
            ZIndex: =3

        lblUnauthorizedMessage As label:
            Align: =Align.Center
            AutoHeight: =true
            Color: =RGBA(184, 0, 0, 1)
            Font: =Font.'Segoe UI'
            Size: =gblAppStyles.FontSize_Medium
            Text: =T.Error_AppInitializationFailed
            Visible: =varIsUnauthorizedOrNetworkFailed Or (gblAppCache.CacheExists And Not gblAppCache.IsUserMaintenanceRequester And Not gblAppCache.IsUserMaintenanceWorker)
            Width: =Min(380, App.Width)
            X: =42
            Y: =206
            ZIndex: =4

        btnReloadUserSettings As button:
            OnSelect: |-
                =UpdateContext({ varRetryCacheLoad: true, varRefreshCacheOverride: true, varIsUnauthorizedOrNetworkFailed: false })
            Text: =T.RetryButtonLabel
            Visible: =lblUnauthorizedMessage.Visible
            ZIndex: =5

    imgLoadingLogo As image:
        Height: =28
        Image: =MSLogo
        PaddingBottom: =5
        PaddingTop: =5
        Width: =130
        X: =Parent.Width/2 - imgLoadingLogo.Width/2
        Y: =conLoading.Height
        ZIndex: =3

    lblDEV_VERSION As label:
        Align: =Align.Right
        Font: =Font.'Segoe UI'
        Height: =37
        Size: =8
        Text: =gblAppVersion
        VerticalAlign: =VerticalAlign.Top
        Width: =60
        X: =Parent.Width - Self.Width
        ZIndex: =4

